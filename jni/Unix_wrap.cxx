/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


/* POSIX system API */
#include <unistd.h>

#include <src\CTest.c>
#include <src\MultiLink.c>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_getuid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uid_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uid_t)getuid();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1english_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Word *arg1 = (Word *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->english, (const char *)arg2, 20-1);
      arg1->english[20-1] = 0;
    } else {
      arg1->english[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1english_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Word *arg1 = (Word *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  result = (char *)(char *) ((arg1)->english);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1word_1class_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Word *arg1 = (Word *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->word_class, (const char *)arg2, 10-1);
      arg1->word_class[10-1] = 0;
    } else {
      arg1->word_class[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1word_1class_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Word *arg1 = (Word *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  result = (char *)(char *) ((arg1)->word_class);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1chinese_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Word *arg1 = (Word *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->chinese, (const char *)arg2, 255-1);
      arg1->chinese[255-1] = 0;
    } else {
      arg1->chinese[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1chinese_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Word *arg1 = (Word *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  result = (char *)(char *) ((arg1)->chinese);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1example_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Word *arg1 = (Word *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->example, (const char *)arg2, 1024-1);
      arg1->example[1024-1] = 0;
    } else {
      arg1->example[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1example_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Word *arg1 = (Word *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  result = (char *)(char *) ((arg1)->example);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1english_1inv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Word *arg1 = (Word *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->english_inv, (const char *)arg2, 20-1);
      arg1->english_inv[20-1] = 0;
    } else {
      arg1->english_inv[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Word_1english_1inv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Word *arg1 = (Word *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Word **)&jarg1; 
  result = (char *)(char *) ((arg1)->english_inv);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1Word(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Word *)new Word();
  *(Word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1Word(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Word *arg1 = (Word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Word **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1english_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WordRef *arg1 = (WordRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->english;
    if (arg2) {
      arg1->english = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->english, (const char *)arg2);
    } else {
      arg1->english = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1english_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WordRef *arg1 = (WordRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  result = (char *) ((arg1)->english);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1word_1class_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WordRef *arg1 = (WordRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->word_class;
    if (arg2) {
      arg1->word_class = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->word_class, (const char *)arg2);
    } else {
      arg1->word_class = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1word_1class_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WordRef *arg1 = (WordRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  result = (char *) ((arg1)->word_class);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1chinese_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WordRef *arg1 = (WordRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->chinese;
    if (arg2) {
      arg1->chinese = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->chinese, (const char *)arg2);
    } else {
      arg1->chinese = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1chinese_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WordRef *arg1 = (WordRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  result = (char *) ((arg1)->chinese);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1example_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WordRef *arg1 = (WordRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->example;
    if (arg2) {
      arg1->example = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->example, (const char *)arg2);
    } else {
      arg1->example = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1example_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WordRef *arg1 = (WordRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  result = (char *) ((arg1)->example);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1english_1inv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WordRef *arg1 = (WordRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->english_inv;
    if (arg2) {
      arg1->english_inv = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->english_inv, (const char *)arg2);
    } else {
      arg1->english_inv = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_WordRef_1english_1inv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WordRef *arg1 = (WordRef *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WordRef **)&jarg1; 
  result = (char *) ((arg1)->english_inv);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1WordRef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WordRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WordRef *)new WordRef();
  *(WordRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1WordRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WordRef *arg1 = (WordRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WordRef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1constructor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CTest *arg1 = (CTest *) 0 ;
  void (*arg2)(CTest *) = (void (*)(CTest *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = *(void (**)(CTest *))&jarg2; 
  if (arg1) (arg1)->constructor = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1constructor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  void (*result)(CTest *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  result = (void (*)(CTest *)) ((arg1)->constructor);
  *(void (**)(CTest *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  CTest *arg1 = (CTest *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  result = (double) ((arg1)->data);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getSum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CTest *arg1 = (CTest *) 0 ;
  double (*arg2)(CTest *,double) = (double (*)(CTest *,double)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = *(double (**)(CTest *,double))&jarg2; 
  if (arg1) (arg1)->getSum = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getSum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  double (*result)(CTest *,double) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  result = (double (*)(CTest *,double)) ((arg1)->getSum);
  *(double (**)(CTest *,double))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getTest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  CTest *arg1 = (CTest *) 0 ;
  double (*arg2)(CTest *,double,double) = (double (*)(CTest *,double,double)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = *(double (**)(CTest *,double,double))&jarg2; 
  if (arg1) (arg1)->getTest = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getTest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  double (*result)(CTest *,double,double) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  result = (double (*)(CTest *,double,double)) ((arg1)->getTest);
  *(double (**)(CTest *,double,double))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1CTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CTest *)new CTest();
  *(CTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1CTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CTest *arg1 = (CTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)CTest_getTest(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_nano_swig_NanoJNIJNI_CTest_1getSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  CTest *arg1 = (CTest *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)CTest_getSum(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI__1CTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CTest *arg1 = (CTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CTest **)&jarg1; 
  _CTest(arg1);
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Start(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Start();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_Iterator(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)Iterator(arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_Search(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)Search(arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Result(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Result();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Result_1Trans(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)Result_Trans(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_nano_swig_NanoJNIJNI_Result_1Examp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)Result_Examp(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1linkcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->linkcount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1linkcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (int) ((arg1)->linkcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement **arg2 = (MultiLinkElement **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = *(MultiLinkElement ***)&jarg2; 
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (MultiLinkElement **) ((arg1)->prev);
  *(MultiLinkElement ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement **arg2 = (MultiLinkElement **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = *(MultiLinkElement ***)&jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (MultiLinkElement **) ((arg1)->next);
  *(MultiLinkElement ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1_1final_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  void (*arg2)(MultiLinkElement *) = (void (*)(MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = *(void (**)(MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->_final = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1_1final_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  void (*result)(MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (void (*)(MultiLinkElement *)) ((arg1)->_final);
  *(void (**)(MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1free_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement *(*arg2)(MultiLinkElement *) = (MultiLinkElement *(*)(MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->free = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1free_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement *(*result)(MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (MultiLinkElement *(*)(MultiLinkElement *)) ((arg1)->free);
  *(MultiLinkElement *(**)(MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1clear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  void (*arg2)(MultiLinkElement *) = (void (*)(MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = *(void (**)(MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->clear = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1clear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  void (*result)(MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (void (*)(MultiLinkElement *)) ((arg1)->clear);
  *(void (**)(MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1MultiLinkElement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultiLinkElement *)new MultiLinkElement();
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1MultiLinkElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiLinkElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  MultiLinkElement_clear(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkElement_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  result = (MultiLinkElement *)MultiLinkElement_free(arg1);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI__1MultiLinkElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MultiLinkElement *arg1 = (MultiLinkElement *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkElement **)&jarg1; 
  arg2 = (int)jarg2; 
  _MultiLinkElement(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1linkcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->linkcount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1linkcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (int) ((arg1)->linkcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1linkindex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->linkindex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1linkindex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (int) ((arg1)->linkindex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  if (arg1) (arg1)->link = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (MultiLinkElement *) ((arg1)->link);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1insertLink_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  void (*arg2)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *) = (void (*)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(void (**)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->insertLink = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1insertLink_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  void (*result)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (void (*)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *)) ((arg1)->insertLink);
  *(void (**)(MultiLinkBase *,MultiLinkElement *,MultiLinkElement *,MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1removeLink_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*arg2)(MultiLinkBase *,MultiLinkElement *) = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->removeLink = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1removeLink_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*result)(MultiLinkBase *,MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) ((arg1)->removeLink);
  *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1get_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*arg2)(MultiLinkBase *,int) = (MultiLinkElement *(*)(MultiLinkBase *,int)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(MultiLinkBase *,int))&jarg2; 
  if (arg1) (arg1)->get = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1get_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*result)(MultiLinkBase *,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (MultiLinkElement *(*)(MultiLinkBase *,int)) ((arg1)->get);
  *(MultiLinkElement *(**)(MultiLinkBase *,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*arg2)(MultiLinkBase *,MultiLinkElement *) = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*result)(MultiLinkBase *,MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) ((arg1)->prev);
  *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*arg2)(MultiLinkBase *,MultiLinkElement *) = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *(*result)(MultiLinkBase *,MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  result = (MultiLinkElement *(*)(MultiLinkBase *,MultiLinkElement *)) ((arg1)->next);
  *(MultiLinkElement *(**)(MultiLinkBase *,MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1MultiLinkBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultiLinkBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultiLinkBase *)new MultiLinkBase();
  *(MultiLinkBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1MultiLinkBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultiLinkBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1removeLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  result = (MultiLinkElement *)MultiLinkBase_removeLink(arg1,arg2);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int arg2 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MultiLinkElement *)MultiLinkBase_get(arg1,arg2);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1insertLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  MultiLinkElement *arg3 = (MultiLinkElement *) 0 ;
  MultiLinkElement *arg4 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  arg3 = *(MultiLinkElement **)&jarg3; 
  arg4 = *(MultiLinkElement **)&jarg4; 
  MultiLinkBase_insertLink(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1prev(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  result = (MultiLinkElement *)MultiLinkBase_prev(arg1,arg2);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_MultiLinkBase_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  result = (MultiLinkElement *)MultiLinkBase_next(arg1,arg2);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI__1MultiLinkBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MultiLinkBase *arg1 = (MultiLinkBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MultiLinkBase **)&jarg1; 
  arg2 = (int)jarg2; 
  _MultiLinkBase(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MAP_1SHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_POOL_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(40960);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MAP_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(40960/8+1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_MAP_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xFF);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1pool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  if (arg1) (arg1)->pool = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1pool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (MultiLinkElement *) ((arg1)->pool);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  UMAP *arg2 = (UMAP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(UMAP **)&jarg2; 
  if (arg1) (arg1)->map = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  UMAP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (UMAP *) ((arg1)->map);
  *(UMAP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1msize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->msize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1msize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (int) ((arg1)->msize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (int) ((arg1)->count);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *(*arg2)(ElementPool *,int) = (MultiLinkElement *(*)(ElementPool *,int)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(ElementPool *,int))&jarg2; 
  if (arg1) (arg1)->at = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *(*result)(ElementPool *,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (MultiLinkElement *(*)(ElementPool *,int)) ((arg1)->at);
  *(MultiLinkElement *(**)(ElementPool *,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1get_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *(*arg2)(ElementPool *) = (MultiLinkElement *(*)(ElementPool *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(MultiLinkElement *(**)(ElementPool *))&jarg2; 
  if (arg1) (arg1)->get = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1get_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *(*result)(ElementPool *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (MultiLinkElement *(*)(ElementPool *)) ((arg1)->get);
  *(MultiLinkElement *(**)(ElementPool *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1back_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  void (*arg2)(ElementPool *,MultiLinkElement *) = (void (*)(ElementPool *,MultiLinkElement *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(void (**)(ElementPool *,MultiLinkElement *))&jarg2; 
  if (arg1) (arg1)->back = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1back_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  void (*result)(ElementPool *,MultiLinkElement *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (void (*)(ElementPool *,MultiLinkElement *)) ((arg1)->back);
  *(void (**)(ElementPool *,MultiLinkElement *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_new_1ElementPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ElementPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ElementPool *)new ElementPool();
  *(ElementPool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_delete_1ElementPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ElementPool **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  int arg2 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MultiLinkElement *)ElementPool_at(arg1,arg2);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ElementPool **)&jarg1; 
  result = (MultiLinkElement *)ElementPool_get(arg1);
  *(MultiLinkElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI_ElementPool_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  ElementPool_back(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_nano_swig_NanoJNIJNI__1ElementPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  ElementPool *arg1 = (ElementPool *) 0 ;
  MultiLinkElement *arg2 = (MultiLinkElement *) 0 ;
  UMAP *arg3 = (UMAP *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ElementPool **)&jarg1; 
  arg2 = *(MultiLinkElement **)&jarg2; 
  arg3 = *(UMAP **)&jarg3; 
  arg4 = (int)jarg4; 
  _ElementPool(arg1,arg2,arg3,arg4);
}


#ifdef __cplusplus
}
#endif

